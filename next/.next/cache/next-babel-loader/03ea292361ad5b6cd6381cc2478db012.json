{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport * as THREE from 'three';\nimport ParticleSystem, { SpriteRenderer } from 'three-nebula';\nimport { test as DEFAULT_DATA } from './data.js';\nvar PerspectiveCamera = THREE.PerspectiveCamera,\n    Scene = THREE.Scene,\n    WebGLRenderer = THREE.WebGLRenderer;\n/**\n * Sets up three js and particle system environment so that they can be rendered\n * into the editor's Stage component.\n *\n */\n\nexport var Visualisation =\n/*#__PURE__*/\nfunction () {\n  function Visualisation(canvas) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_DATA;\n\n    _classCallCheck(this, Visualisation);\n\n    this.canvas = canvas;\n    this.data = data;\n    this.shouldAnimate = true;\n  }\n  /**\n   * Starts the visualization.\n   *\n   * @return {Promise<Visualization>}\n   */\n\n\n  _createClass(Visualisation, [{\n    key: \"start\",\n    value: function start() {\n      this.shouldAnimate = true;\n      return this.makeScene().makeCamera().makeWebGlRenderer().makeParticleSystem();\n    }\n    /**\n     * Stops the visualisation.\n     *\n     * @return void\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.shouldAnimate = false;\n      this.particleSystem.destroy();\n    }\n    /**\n     * Renders the visualization.\n     *\n     * @return {Visualization}\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var animate = function animate() {\n        if (!_this.shouldAnimate) {\n          return;\n        }\n\n        requestAnimationFrame(animate);\n\n        _this.particleSystem.update();\n\n        _this.webGlRenderer.render(_this.scene, _this.camera);\n      };\n\n      animate();\n      return this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var camera = this.camera,\n          webGlRenderer = this.webGlRenderer,\n          _this$canvas = this.canvas,\n          clientWidth = _this$canvas.clientWidth,\n          clientHeight = _this$canvas.clientHeight;\n      camera.aspect = clientWidth / clientHeight;\n      camera.updateProjectionMatrix();\n      webGlRenderer.setSize(clientWidth, clientHeight, false);\n    }\n  }, {\n    key: \"makeScene\",\n    value: function makeScene() {\n      this.scene = new Scene();\n      return this;\n    }\n  }, {\n    key: \"makeCamera\",\n    value: function makeCamera() {\n      var cameraState = {\n        type: 'PerspectiveCamera',\n        params: {\n          fov: 75,\n          nearPlane: 0.1,\n          farPlane: 1000\n        },\n        position: {\n          x: -10,\n          y: 0,\n          z: 50\n        },\n        rotation: {\n          x: 0,\n          y: 0,\n          z: 0\n        },\n        controller: {\n          enabled: true\n        }\n      };\n      var _this$canvas2 = this.canvas,\n          clientWidth = _this$canvas2.clientWidth,\n          clientHeight = _this$canvas2.clientHeight;\n      var params = cameraState.params,\n          position = cameraState.position,\n          rotation = cameraState.rotation;\n      var fov = params.fov,\n          nearPlane = params.nearPlane,\n          farPlane = params.farPlane;\n      this.camera = new PerspectiveCamera(fov, clientWidth / clientHeight, nearPlane, farPlane);\n      this.camera.position.copy(position);\n      this.camera.rotation.set(rotation.x, rotation.y, rotation.z);\n      return this;\n    }\n  }, {\n    key: \"makeWebGlRenderer\",\n    value: function makeWebGlRenderer() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        alpha: true,\n        antialias: true\n      };\n      var canvas = this.canvas,\n          _this$canvas3 = this.canvas,\n          clientWidth = _this$canvas3.clientWidth,\n          clientHeight = _this$canvas3.clientHeight;\n      this.webGlRenderer = this.webGlRenderer || new WebGLRenderer(_objectSpread({\n        canvas: canvas\n      }, options));\n      this.webGlRenderer.setSize(clientWidth, clientHeight, false);\n      return this;\n    }\n  }, {\n    key: \"makeParticleSystem\",\n    value: function makeParticleSystem() {\n      var _this2 = this;\n\n      return new _Promise(function (resolve) {\n        ParticleSystem.fromJSONAsync(_this2.data.particleSystemState, THREE).then(function (particleSystem) {\n          _this2.particleSystem = particleSystem;\n          particleSystem.addRenderer(new SpriteRenderer(_this2.scene, THREE));\n          return resolve(_this2.render());\n        }).catch(console.error);\n      });\n    }\n  }]);\n\n  return Visualisation;\n}();","map":{"version":3,"sources":["/Users/rohandeshpande/Projects/nebula-web/next/pages/home/Hero/Canvas/Visualisation/index.js"],"names":["THREE","ParticleSystem","SpriteRenderer","test","DEFAULT_DATA","PerspectiveCamera","Scene","WebGLRenderer","Visualisation","canvas","data","shouldAnimate","makeScene","makeCamera","makeWebGlRenderer","makeParticleSystem","particleSystem","destroy","animate","requestAnimationFrame","update","webGlRenderer","render","scene","camera","clientWidth","clientHeight","aspect","updateProjectionMatrix","setSize","cameraState","type","params","fov","nearPlane","farPlane","position","x","y","z","rotation","controller","enabled","copy","set","options","alpha","antialias","resolve","fromJSONAsync","particleSystemState","then","addRenderer","catch","console","error"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\n\nimport ParticleSystem, { SpriteRenderer } from 'three-nebula';\n\nimport { test as DEFAULT_DATA } from './data.js';\n\nconst { PerspectiveCamera, Scene, WebGLRenderer } = THREE;\n\n/**\n * Sets up three js and particle system environment so that they can be rendered\n * into the editor's Stage component.\n *\n */\nexport class Visualisation {\n  constructor(canvas, data = DEFAULT_DATA) {\n    this.canvas = canvas;\n    this.data = data;\n    this.shouldAnimate = true;\n  }\n\n  /**\n   * Starts the visualization.\n   *\n   * @return {Promise<Visualization>}\n   */\n  start() {\n    this.shouldAnimate = true;\n\n    return this.makeScene()\n      .makeCamera()\n      .makeWebGlRenderer()\n      .makeParticleSystem();\n  }\n\n  /**\n   * Stops the visualisation.\n   *\n   * @return void\n   */\n  stop() {\n    this.shouldAnimate = false;\n    this.particleSystem.destroy();\n  }\n\n  /**\n   * Renders the visualization.\n   *\n   * @return {Visualization}\n   */\n  render() {\n    const animate = () => {\n      if (!this.shouldAnimate) {\n        return;\n      }\n\n      requestAnimationFrame(animate);\n\n      this.particleSystem.update();\n      this.webGlRenderer.render(this.scene, this.camera);\n    };\n\n    animate();\n\n    return this;\n  }\n\n  resize() {\n    const {\n      camera,\n      webGlRenderer,\n      canvas: { clientWidth, clientHeight },\n    } = this;\n\n    camera.aspect = clientWidth / clientHeight;\n    camera.updateProjectionMatrix();\n    webGlRenderer.setSize(clientWidth, clientHeight, false);\n  }\n\n  makeScene() {\n    this.scene = new Scene();\n\n    return this;\n  }\n\n  makeCamera() {\n    const cameraState = {\n      type: 'PerspectiveCamera',\n      params: {\n        fov: 75,\n        nearPlane: 0.1,\n        farPlane: 1000,\n      },\n      position: {\n        x: -10,\n        y: 0,\n        z: 50,\n      },\n      rotation: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n      controller: {\n        enabled: true,\n      },\n    };\n    const {\n      canvas: { clientWidth, clientHeight },\n    } = this;\n    const { params, position, rotation } = cameraState;\n    const { fov, nearPlane, farPlane } = params;\n\n    this.camera = new PerspectiveCamera(\n      fov,\n      clientWidth / clientHeight,\n      nearPlane,\n      farPlane\n    );\n\n    this.camera.position.copy(position);\n    this.camera.rotation.set(rotation.x, rotation.y, rotation.z);\n\n    return this;\n  }\n\n  makeWebGlRenderer(options = { alpha: true, antialias: true }) {\n    const {\n      canvas,\n      canvas: { clientWidth, clientHeight },\n    } = this;\n\n    this.webGlRenderer =\n      this.webGlRenderer || new WebGLRenderer({ canvas, ...options });\n    this.webGlRenderer.setSize(clientWidth, clientHeight, false);\n\n    return this;\n  }\n\n  makeParticleSystem() {\n    return new Promise(resolve => {\n      ParticleSystem.fromJSONAsync(this.data.particleSystemState, THREE)\n        .then(particleSystem => {\n          this.particleSystem = particleSystem;\n          particleSystem.addRenderer(new SpriteRenderer(this.scene, THREE));\n\n          return resolve(this.render());\n        })\n        .catch(console.error);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}