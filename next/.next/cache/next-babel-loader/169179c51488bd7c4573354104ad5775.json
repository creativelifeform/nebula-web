{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/rohandeshpande/Projects/nebula-web/next/pages/home/Hero/Canvas/index.js\";\nimport React, { Component } from 'react';\nexport default class Canvas extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleResize\", e => {\n      this.visualisation.resize();\n    });\n\n    this.canvasRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    // guards against nextjs errors for window being undefined on the server\n    if (!window) {\n      return;\n    }\n\n    const {\n      Visualisation\n    } = require('./Visualisation');\n\n    this.visualisation = await new Visualisation(this.canvas).start();\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  componentWillUnmount() {\n    this.visualisation.stop();\n  }\n\n  render() {\n    return React.createElement(\"canvas\", {\n      ref: this.canvasRef,\n      className: \"canvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    });\n  }\n\n  get canvas() {\n    return this.canvasRef.current;\n  }\n\n}","map":{"version":3,"sources":["/Users/rohandeshpande/Projects/nebula-web/next/pages/home/Hero/Canvas/index.js"],"names":["React","Component","Canvas","constructor","props","e","visualisation","resize","canvasRef","createRef","componentDidMount","window","Visualisation","require","canvas","start","addEventListener","handleResize","componentWillUnmount","stop","render","current"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,eAAe,MAAMC,MAAN,SAAqBD,SAArB,CAA+B;AAC5CE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,0CAuBJC,CAAC,IAAI;AAClB,WAAKC,aAAL,CAAmBC,MAAnB;AACD,KAzBkB;;AAGjB,SAAKC,SAAL,GAAiBR,KAAK,CAACS,SAAN,EAAjB;AACD;;AAED,QAAMC,iBAAN,GAA0B;AACxB;AACA,QAAI,CAACC,MAAL,EAAa;AACX;AACD;;AAED,UAAM;AAAEC,MAAAA;AAAF,QAAoBC,OAAO,CAAC,iBAAD,CAAjC;;AAEA,SAAKP,aAAL,GAAqB,MAAM,IAAIM,aAAJ,CAAkB,KAAKE,MAAvB,EAA+BC,KAA/B,EAA3B;AAEAJ,IAAAA,MAAM,CAACK,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,YAAvC;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKZ,aAAL,CAAmBa,IAAnB;AACD;;AAMDC,EAAAA,MAAM,GAAG;AACP,WAAO;AAAQ,MAAA,GAAG,EAAE,KAAKZ,SAAlB;AAA6B,MAAA,SAAS,EAAC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAIM,MAAJ,GAAa;AACX,WAAO,KAAKN,SAAL,CAAea,OAAtB;AACD;;AAlC2C","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Canvas extends Component {\n  constructor(props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    // guards against nextjs errors for window being undefined on the server\n    if (!window) {\n      return;\n    }\n\n    const { Visualisation } = require('./Visualisation');\n\n    this.visualisation = await new Visualisation(this.canvas).start();\n\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  componentWillUnmount() {\n    this.visualisation.stop();\n  }\n\n  handleResize = e => {\n    this.visualisation.resize();\n  };\n\n  render() {\n    return <canvas ref={this.canvasRef} className=\"canvas\" />;\n  }\n\n  get canvas() {\n    return this.canvasRef.current;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}